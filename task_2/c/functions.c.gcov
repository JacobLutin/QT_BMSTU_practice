        -:    0:Source:functions.c
        -:    0:Graph:functions.gcno
        -:    0:Data:functions.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include "functions.h"
        -:    3:#include "errors.h"
        -:    4:
        -:    5:int calc_average(FILE *f, float *average, float *count)
        -:    6:{
        -:    7:	float x;
        7:    8:	float sum = 0;
        -:    9:
        7:   10:	if (f == NULL)
        -:   11:	{
        1:   12:		return WRONG_DATA;
        -:   13:	}
        -:   14:
        6:   15:	if (average == NULL)
        -:   16:	{
    #####:   17:		return WRONG_DATA;
        -:   18:	}
        -:   19:
        6:   20:	if (count == NULL)
        -:   21:	{
    #####:   22:		return WRONG_DATA;
        -:   23:	}
        -:   24:
        6:   25:	switch (fscanf(f, "%f", &x))
        -:   26:	{
        -:   27:		case -1:
        1:   28:			return EMPTY_FILE;
        -:   29:		case 0:
        1:   30:			return WRONG_DATA;
        -:   31:	}
        -:   32:
        4:   33:	*count = 1;
        -:   34:
        4:   35:	sum = x;
        -:   36:
       25:   37:	while (fscanf(f, "%f", &x) == 1)
        -:   38:	{
       17:   39:		sum += x;
       17:   40:		*count += 1;
       17:   41:	}
        -:   42:
        4:   43:	*average = sum / *count;
        -:   44:
        4:   45:	return 0;
        7:   46:}
        -:   47:
        -:   48:int disperse(FILE *f, float average, float *D)
        -:   49:{
        -:   50:	float x;
        6:   51:	int count = 1;
        -:   52:
        6:   53:	if (f == NULL)
        -:   54:	{
    #####:   55:		return WRONG_DATA;
        -:   56:	}
        -:   57:
        6:   58:	if (D == NULL)
        -:   59:	{
    #####:   60:		return WRONG_DATA;
        -:   61:	}
        -:   62:
        6:   63:	switch(fscanf(f, "%f", &x))
        -:   64:	{
        -:   65:		case -1:
        1:   66:			return EMPTY_FILE;
        -:   67:		case 0:
        1:   68:			return WRONG_DATA;
        -:   69:	}
        -:   70:
        4:   71:	*D = (x - average) * (x - average);
        -:   72:
       19:   73:	while (fscanf(f, "%f", &x) == 1)
        -:   74:	{
       11:   75:		*D += (x - average) * (x - average);
       11:   76:		count++;
       11:   77:	}
        -:   78:
        4:   79:	*D /= count;
        -:   80:
        4:   81:	return 0;
        6:   82:}
